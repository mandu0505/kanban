{"version":3,"sources":["components/atoms.tsx","components/DragabbleCard.tsx","components/Board.tsx","components/CreateNewBoard.tsx","components/Trashcan.tsx","App.tsx","index.tsx","theme.ts"],"names":["toDoState","atom","key","default","TO_DO","DOING","DONE","HI","Card","styled","div","props","theme","cardColor","DraggableCard","toDoId","toDoText","index","draggableId","magic","snapshot","ref","innerRef","dragHandleProps","draggableProps","React","memo","Wrapper","isDragging","boardColor","Title","Form","form","Area","isDraggingFromThis","isDraggingOver","Board","boardIndex","toDos","boardId","setToDos","useSetRecoilState","useForm","register","handleSubmit","setValue","onSubmit","toDo","oldToDos","id","Date","now","text","provided","required","type","placeholder","droppableId","Boolean","draggingFromThisWith","droppableProps","map","CreateNewBoard","formName","console","log","Bin","IconWrapper","TrashBin","icon","faTrashAlt","Boards","App","useRecoilState","onDragEnd","destination","source","boardCopy","splice","sourceCopy","destCopy","targetElement","sourceKey","destKey","keyList","Object","keys","forEach","element","newToDos","slice","direction","GlobalStyle","createGlobalStyle","bgColor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.45ca90dc.chunk.js","sourcesContent":["import { atom } from \"recoil\";\n\nexport interface ITodo {\n  id: number;\n  text: string;\n}\n\nexport interface IToDoState {\n  [key: string]: ITodo[];\n}\n\nexport const toDoState = atom<IToDoState>({\n  key: \"toDo\",\n  default: {\n    TO_DO: [],\n    DOING: [],\n    DONE: [],\n    HI: [],\n  },\n});","import { Draggable } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\";\nimport React from \"react\";\n\nconst Card = styled.div`\n  border-radius: 5px;\n  margin-bottom: 5px;\n  padding: 10px 10px;\n  background-color: ${(props) => props.theme.cardColor};\n`;\n\ninterface IDraggableCardProps {\n  toDoId: number;\n  toDoText: string;\n  index: number;\n}\n\nfunction DraggableCard({ toDoId, toDoText, index }: IDraggableCardProps) {\n  return (\n    <Draggable draggableId={toDoId + \"\"} index={index}>\n      {(magic, snapshot) => (\n        <Card\n          ref={magic.innerRef}\n          {...magic.dragHandleProps}\n          {...magic.draggableProps}\n        >\n          {toDoText}\n        </Card>\n      )}\n    </Draggable>\n  );\n}\n\nexport default React.memo(DraggableCard);\n","import { Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { useForm } from \"react-hook-form\";\nimport styled from \"styled-components\";\nimport DraggableCard from \"./DragabbleCard\";\nimport { ITodo, toDoState } from \"./atoms\";\nimport { useSetRecoilState } from \"recoil\";\nimport React from \"react\";\n\ninterface IBoardProps {\n  toDos: ITodo[];\n  boardId: string;\n  boardIndex: number;\n}\n\nconst Wrapper = styled.div<IWrapperProps>`\n  width: 300px;\n  padding: 10px;\n  border-radius: 5px;\n  min-height: 200px;\n  display: flex;\n  flex-direction: column;\n  box-shadow: ${(props) =>\n    props.isDragging ? \"3px 3px 10px rgba(0, 0, 0, 0.5)\" : \"none\"};\n  background-color: ${(props) =>\n    props.isDragging ? \"#74b9ff\" : props.theme.boardColor};\n  transition: background-color 0.3s ease;\n`;\n\nconst Title = styled.div`\n  font-size: 20px;\n  font-weight: 600;\n  text-align: center;\n  padding: 10px;\n  &:hover {\n    background-color: #74b9ff;\n    transition: background-color 0.3s ease;\n  }\n`;\n\ninterface IAreaProps {\n  isDraggingOver: Boolean;\n  isDraggingFromThis: Boolean;\n}\n\ninterface IWrapperProps {\n  isDragging: Boolean;\n}\n\nconst Form = styled.form`\n  width: 100%;\n`;\n\nconst Area = styled.div<IAreaProps>`\n  background-color: ${(props) => {\n    return props.isDraggingFromThis\n      ? \"#b2bec3\"\n      : props.isDraggingOver\n      ? \"#636e72\"\n      : props.theme.boardColor;\n  }};\n  flex-grow: 1;\n  transition: background-color 0.3s ease;\n`;\n\ninterface IForm {\n  toDo: string;\n}\n\nfunction Board({ boardIndex, toDos, boardId }: IBoardProps) {\n  const setToDos = useSetRecoilState(toDoState);\n  const { register, handleSubmit, setValue } = useForm<IForm>();\n  const onSubmit = ({ toDo }: IForm) => {\n    setValue(\"toDo\", \"\");\n    setToDos((oldToDos) => {\n      return {\n        ...oldToDos,\n        [boardId]: [...oldToDos[boardId], { id: Date.now(), text: toDo }],\n      };\n    });\n  };\n  return (\n    <Draggable draggableId={boardId} index={boardIndex}>\n      {(provided, snapshot) => (\n        <Wrapper\n          isDragging={snapshot.isDragging}\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n        >\n          <Title {...provided.dragHandleProps}>\n            <h3>{boardId}</h3>\n          </Title>\n          <Form onSubmit={handleSubmit(onSubmit)}>\n            <input\n              {...register(\"toDo\", { required: true })}\n              type=\"text\"\n              placeholder={`Add task on ${boardId}`}\n            />\n          </Form>\n          <Droppable droppableId={boardId} type=\"toDo\">\n            {(magic, snapshot) => (\n              <Area\n                isDraggingOver={snapshot.isDraggingOver}\n                isDraggingFromThis={Boolean(snapshot.draggingFromThisWith)}\n                ref={magic.innerRef}\n                {...magic.droppableProps}\n              >\n                {toDos.map((toDo, index) => (\n                  <DraggableCard\n                    key={toDo.id}\n                    toDoId={toDo.id}\n                    toDoText={toDo.text}\n                    index={index}\n                  />\n                ))}\n                {magic.placeholder}\n              </Area>\n            )}\n          </Droppable>\n        </Wrapper>\n      )}\n    </Draggable>\n  );\n}\n\nexport default React.memo(Board);\n","import { useForm } from \"react-hook-form\";\nimport { useSetRecoilState } from \"recoil\";\nimport { toDoState } from \"./atoms\";\nimport styled from \"styled-components\";\n\ninterface IBoard {\n  formName: string;\n}\n\nconst Form = styled.form`\n  margin: 30px 0px;\n`;\n\nfunction CreateNewBoard() {\n  const { register, handleSubmit, setValue } = useForm<IBoard>();\n  const setToDos = useSetRecoilState(toDoState);\n  const onValid = ({ formName }: IBoard) => {\n    console.log(formName);\n    setToDos((oldToDos) => {\n      return {\n        ...oldToDos,\n        [formName]: [],\n      };\n    });\n    setValue(\"formName\", \"\");\n  };\n  return (\n    <Form onSubmit={handleSubmit(onValid)}>\n      <input {...register(\"formName\", { required: true })} type=\"text\" />\n      <button>Add a New Board</button>\n    </Form>\n  );\n}\n\nexport default CreateNewBoard;","import { faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\";\n\ninterface IBinProps {\n  isDraggingOver: Boolean;\n}\n\nconst Bin = styled.div<IBinProps>`\n  width: 75px;\n  height: 75px;\n  border-radius: 50%;\n  background-color: ${(props) => (props.isDraggingOver ? \"black\" : \"white\")};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n  position: relative;\n  transition: all 0.3s ease;\n  margin: 30px 0px;\n  div {\n    color: ${(props) => (props.isDraggingOver ? \"white\" : \"black\")};\n    transform: ${(props) => (props.isDraggingOver ? \"scale(1.4)\" : \"none\")};\n    transition: all 0.3s ease;\n  }\n`;\n\nconst IconWrapper = styled.div`\n  position: absolute;\n`;\n\nfunction TrashBin() {\n  return (\n    <Droppable droppableId=\"trashBin\" type=\"toDo\">\n      {(provided, snapshot) => {\n        return (\n          <Bin\n            isDraggingOver={snapshot.isDraggingOver}\n            ref={provided.innerRef}\n            {...provided.droppableProps}\n          >\n            <IconWrapper>\n              <FontAwesomeIcon icon={faTrashAlt} />\n            </IconWrapper>\n            {provided.placeholder}\n          </Bin>\n        );\n      }}\n    </Droppable>\n  );\n}\n\nexport default TrashBin;","import { DragDropContext, Droppable, DropResult } from \"react-beautiful-dnd\";\nimport { useRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { IToDoState, toDoState } from \"./components/atoms\";\nimport Board from \"./components/Board\";\nimport CreateNewBoard from \"./components/CreateNewBoard\";\nimport TrashBin from \"./components/Trashcan\";\n\n\nconst Wrapper = styled.div`\n  display: flex;\n  max-width: 1000px;\n  width: 100%;\n  margin: 0 auto;\n  justify-content: space-evenly;\n  align-items: center;\n  min-height: 100vh;\n  flex-direction: column;\n`;\n\nconst Boards = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 300px);\n  gap: 20px;\n`;\n\nfunction App() {\n  const [toDos, setToDos] = useRecoilState(toDoState);\n  const onDragEnd = ({\n    type,\n    draggableId,\n    destination,\n    source,\n  }: DropResult) => {\n    if (!destination) return;\n    if (destination?.droppableId === \"trashBin\") {\n      // delete toDo\n      setToDos((oldToDos) => {\n        return {\n          ...oldToDos,\n          [source.droppableId]: [\n            ...oldToDos[source.droppableId].slice(0, source.index),\n            ...oldToDos[source.droppableId].slice(source.index + 1),\n          ],\n        };\n      });\n      return;\n    }\n\n    if (type === \"board\") {\n      if (destination.index === source.index) return;\n      setToDos((oldToDos) => {\n        const keyList = Object.keys(toDos);\n        let sourceKey: string, destKey: string;\n        keyList.forEach((element, index) => {\n          if (index === source.index) sourceKey = element;\n          if (index === destination.index) destKey = element;\n        });\n        const newToDos: IToDoState = {};\n        keyList.forEach((element) => {\n          if (element === sourceKey) return;\n          if (element === destKey && source.index > destination.index) {\n            newToDos[sourceKey] = [...oldToDos[sourceKey]];\n          }\n          newToDos[element] = [...oldToDos[element]];\n          if (element === destKey && source.index < destination.index) {\n            newToDos[sourceKey] = [...oldToDos[sourceKey]];\n          }\n        });\n        return newToDos;\n      });\n      return;\n    }\n\n    if (destination?.droppableId === source.droppableId) {\n      setToDos((oldToDos) => {\n        const boardCopy = [...oldToDos[source.droppableId]];\n        boardCopy.splice(\n          destination?.index,\n          0,\n          ...boardCopy.splice(source.index, 1)\n        );\n        return {\n          ...oldToDos,\n          [source.droppableId]: boardCopy,\n        };\n      });\n    }\n\n    if (destination?.droppableId !== source.droppableId) {\n      setToDos((oldToDos) => {\n        const sourceCopy = [...oldToDos[source.droppableId]];\n        const destCopy = [...oldToDos[destination.droppableId]];\n        const targetElement = sourceCopy.splice(source.index, 1);\n        destCopy.splice(destination.index, 0, ...targetElement);\n        return {\n          ...oldToDos,\n          [source.droppableId]: sourceCopy,\n          [destination.droppableId]: destCopy,\n        };\n      });\n    }\n  };\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <Wrapper>\n        <CreateNewBoard />\n        <Droppable\n          droppableId=\"droppableBoards\"\n          type=\"board\"\n          direction=\"horizontal\"\n        >\n          {(provided, snapshot) => (\n            <Boards ref={provided.innerRef}>\n              {Object.keys(toDos).map((boardId, index) => (\n                <Board\n                  boardIndex={index}\n                  boardId={boardId}\n                  key={boardId}\n                  toDos={toDos[boardId]}\n                />\n              ))}\n              {provided.placeholder}\n            </Boards>\n          )}\n        </Droppable>\n        <TrashBin />\n      </Wrapper>\n    </DragDropContext>\n  );\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { createGlobalStyle, ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\nimport { darkTheme } from \"./theme\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n*[hidden] {\n    display: none;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color: black;\n  line-height: 1.2;\n}\na {\n  text-decoration: none;\n  color: inherit;\n}\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: \"black\",\n  boardColor: \"blanchedalmond\",\n  cardColor: \"white\",\n};\n"],"sourceRoot":""}